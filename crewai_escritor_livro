import os
from crewai import Agent, Task, Crew, Process
from crewai_tools import SerperDevTool

# Configura√ß√£o das chaves da API
os.environ["SERPER_API_KEY"] = "sua_chave"
os.environ["OPENAI_API_KEY"] = "sua_chave"

# Instancia a ferramenta de pesquisa
search_tool = SerperDevTool(n_results=30)

# üîé Agente Pesquisador
pesquisador = Agent(
    role="Especialista em Pesquisa",
    goal="Identificar os 10 subtemas mais relevantes sobre {tema}",
    backstory="Pesquisador experiente, encontra e organiza conhecimento de forma clara.",
    tools=[search_tool],
    verbose=True,
    memory=True
)

# üìñ Agente Planejador
planejador = Agent(
    role="Estrategista de Conte√∫do",
    goal="Criar um esqueleto detalhado do livro",
    backstory="Especialista em estrutura√ß√£o de conte√∫do e progress√£o l√≥gica.",
    verbose=True,
    memory=True
)

# ‚úçÔ∏è Agente Escritor
escritor = Agent(
    role="Escritor Profissional",
    goal="Especialista em escrever um livro completo sobre o tema {tema} baseado na estrutura definida",
    backstory="Transforma conhecimento complexo sobre o tema {tema} em um material profundo, fluido e bem formatado.",
    verbose=True,
    memory=True
)

# üõ†Ô∏è Tarefas

# 1Ô∏è‚É£ Pesquisa de Subtemas
pesquisa_task = Task(
    description=(
        "Pesquisar na internet e identificar os 10 subtemas mais relevantes para o livro sobre {tema}."
        " Criar um mapa conceitual conectando os subtemas."
    ),
    expected_output="Relat√≥rio detalhado com os 10 subtemas e um mapa conceitual.",
    agent=pesquisador
)

# 2Ô∏è‚É£ Estrutura√ß√£o do Conte√∫do
estrutura_task = Task(
    description=(
        "Criar um esqueleto detalhado do livro com t√≠tulo e cap√≠tulos:"
        "\n- T√≠tulo principal"
        "\n- 10 cap√≠tulos sequenciais"
        "\n- Descri√ß√£o de 1000-1500 palavras para cada cap√≠tulo"
    ),
    expected_output="Plano detalhado do livro com estrutura organizada.",
    agent=planejador
)

# 3Ô∏è‚É£ Escrita do Livro
escrita_task = Task(
    description=(
        "Escrever um livro mantendo foco nas tem√°ticas seguindo o plano criado com base na estrutura definida seguindo "
        "Cada cap√≠tulo deve ser escrito conforme a tecnica de cadeia de pensamentos "
        "Cada cap√≠tulo deve obrigat√≥riamente possuir no m√≠nimo 6500 palavras de argumenta√ß√£o, e deve conter:"
        "\n- Introdu√ß√£o"
        "\n- Desenvolvimento com no m√≠nimo 5 se√ß√µes"
        "\n- Exemplos de codigo e pr√°tica de implementa√ß√£o"
        "\n- Explica√ß√£o para leigos no tema"
        "\n- Conclus√£o conectando ao pr√≥ximo cap√≠tulo"
    ),
    expected_output="Documento Markdown com o livro estruturado.",
    agent=escritor,
    output_file="livro_v6.md"
    
)

# üèóÔ∏è Criando a Equipe
crew = Crew(
    agents=[pesquisador, planejador, escritor],
    tasks=[pesquisa_task, estrutura_task, escrita_task],
    process=Process.sequential
)

# üöÄ Execu√ß√£o do Projeto
if __name__ == "__main__":
    tema = input("Digite o tema do livro: ")

    print("\nüîç Iniciando pesquisa sobre:", tema)
    resultado = crew.kickoff(inputs={"tema": tema})



    print("\n‚úÖ Livro gerado com sucesso! Arquivo salvo como 'livro.md'.")
