import os
from crewai import Agent, Task, Crew, Process
from llama_index.core import SimpleDirectoryReader, KnowledgeGraphIndex
from llama_index.core.graph_stores import SimpleGraphStore
from llama_index.core.node_parser import SimpleNodeParser
from llama_index.llms.openai import OpenAI  # ‚úÖ Correto

# Configurar chave OpenAI
os.environ["OPENAI_API_KEY"] = "sua_chave_api"

# Diret√≥rio dos arquivos
pdf_files = ["/home/leo/projetos_python/crewai_graphrag/arquivo_01.pdf", "/home/leo/projetos_python/crewai_graphrag/arquivo_02.pdf"]

# üîπ 1Ô∏è‚É£ Extra√ß√£o de Texto dos PDFs
documents = SimpleDirectoryReader(input_files=pdf_files).load_data()

# üîπ 2Ô∏è‚É£ Constru√ß√£o do Grafo de Conhecimento
graph_store = SimpleGraphStore()
parser = SimpleNodeParser.from_defaults()
index = KnowledgeGraphIndex.from_documents(documents, graph_store=graph_store, node_parser=parser)

# üîπ 3Ô∏è‚É£ Criando os Agentes CrewAI
extrator_temas = Agent(
    role="Extrator de Temas",
    goal="Identificar os principais t√≥picos em cada PDF",
    backstory="Voc√™ √© um especialista em an√°lise textual e extra√ß√£o de t√≥picos importantes.",
    verbose=True,
)

comparador_conceitos = Agent(
    role="Comparador de Conceitos",
    goal="Relacionar os temas entre os dois documentos utilizando GraphRAG",
    backstory="Voc√™ √© um analista de conhecimento que encontra conex√µes entre conceitos em documentos.",
    verbose=True,
)

analista_correlacoes = Agent(
    role="Analista de Correla√ß√µes",
    goal="Identificar e destacar trechos espec√≠ficos onde h√° interse√ß√£o entre os documentos",
    backstory="Voc√™ analisa os textos em detalhes para encontrar onde os temas convergem.",
    verbose=True,
)

formatador_relatorio = Agent(
    role="Formatador de Relat√≥rio",
    goal="Organizar os achados em um documento Markdown estruturado",
    backstory="Voc√™ √© um especialista em formata√ß√£o e organiza√ß√£o de informa√ß√µes para gerar relat√≥rios claros.",
    verbose=True,
)

# üîπ 4Ô∏è‚É£ Criando as Tarefas CrewAI
tarefa_extracao = Task(
    description="Leia os documentos e extraia os temas principais.",
    agent=extrator_temas,
    expected_output="Uma lista dos principais t√≥picos identificados em cada documento.",  # ‚úÖ Adicionado
)

tarefa_comparacao = Task(
    description="Analise os temas extra√≠dos e encontre conex√µes entre eles utilizando GraphRAG.",
    agent=comparador_conceitos,
    expected_output="Um relat√≥rio das conex√µes encontradas entre os temas dos documentos.",  # ‚úÖ Adicionado
)

tarefa_correlacao = Task(
    description="Identifique trechos espec√≠ficos onde os temas de ambos os documentos se conectam.",
    agent=analista_correlacoes,
    expected_output="Trechos espec√≠ficos dos documentos onde h√° interse√ß√£o entre os temas.",  # ‚úÖ Adicionado
)

tarefa_formatacao = Task(
    description="Organize os achados em um arquivo Markdown estruturado.",
    agent=formatador_relatorio,
    expected_output="Um arquivo Markdown bem formatado com os resultados da an√°lise.",  # ‚úÖ Adicionado
    output_file="relatorio_correlacoes.md"
)

# üîπ 5Ô∏è‚É£ Criando o Crew
crew = Crew(
    agents=[extrator_temas, comparador_conceitos, analista_correlacoes, formatador_relatorio],
    tasks=[tarefa_extracao, tarefa_comparacao, tarefa_correlacao, tarefa_formatacao],
    process=Process.sequential  # Executar as tarefas em sequ√™ncia
)

# üîπ 6Ô∏è‚É£ Executando a An√°lise
resultado = crew.kickoff()
print("‚úÖ An√°lise conclu√≠da! Relat√≥rio salvo em 'relatorio_correlacoes.md'")
