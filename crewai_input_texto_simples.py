import os
from crewai import Agent, Task, Crew, Process, LLM

# Configura√ß√£o das chaves de API
# Define a chave de API necess√°ria para acessar o servi√ßo do modelo de linguagem
os.environ["GEMINI_API_KEY"] = "sua chave google ai studio"

# Defini√ß√£o do modelo de linguagem (LLM) que os agentes ir√£o utilizar
# O modelo √© configurado com um par√¢metro de temperatura que controla a aleatoriedade das respostas
llm_gemini = LLM(
    model="gemini/gemini-1.5-pro-latest",
    temperature=0.7,
)

# Cria√ß√£o dos agentes que ir√£o realizar tarefas espec√≠ficas
# Cada agente tem um papel, objetivo, hist√≥rico, e utiliza o modelo de linguagem definido

# Agente respons√°vel por analisar processos tecnol√≥gicos
especialista_ti = Agent(
    role="Especialista de TI",
    goal="Analisar e mapear os processos tecnol√≥gicos do cen√°rio descrito.",
    backstory=(
        "Voc√™ √© um especialista altamente qualificado em tecnologia da informa√ß√£o. "
        "Seu papel √© analisar o cen√°rio descrito em {cenario} e identificar os principais processos "
        "tecnol√≥gicos envolvidos, garantindo um entendimento claro do ambiente de TI."
    ),
    verbose=True,
    memory=True,
    llm=llm_gemini,
)

# Agente respons√°vel por identificar riscos tecnol√≥gicos
especialista_riscos = Agent(
    role="Especialista em Riscos de Tecnologia",
    goal="Identificar poss√≠veis riscos associados aos processos mapeados.",
    backstory=(
        "Voc√™ √© um especialista em riscos de tecnologia com anos de experi√™ncia. "
        "Com base nos processos descritos pelo Especialista de TI, sua miss√£o √© "
        "avaliar e detalhar poss√≠veis vulnerabilidades e amea√ßas tecnol√≥gicas."
    ),
    verbose=True,
    memory=True,
    llm=llm_gemini,
)

# Agente respons√°vel por planejar auditorias para mitigar riscos
auditor_ti = Agent(
    role="Auditor de TI",
    goal="Criar um planejamento de auditoria detalhado para mitigar os riscos identificados.",
    backstory=(
        "Voc√™ √© um auditor de TI experiente e meticuloso. Seu papel √© utilizar "
        "os riscos identificados pelo Especialista em Riscos e criar um planejamento "
        "detalhado de auditoria para avaliar e mitigar esses riscos."
    ),
    verbose=True,
    memory=True,
    llm=llm_gemini,
)

# Cria√ß√£o das tarefas que cada agente ir√° executar
# Cada tarefa tem uma descri√ß√£o, uma sa√≠da esperada e √© atribu√≠da a um agente

# Tarefa para mapear processos tecnol√≥gicos
tarefa_mapeamento = Task(
    description=(
        "Analise o cen√°rio de TI fornecido em {cenario} e identifique os principais processos tecnol√≥gicos envolvidos. "
        "Liste os processos de forma clara e objetiva."
    ),
    expected_output="Uma lista detalhada dos principais processos tecnol√≥gicos do cen√°rio descrito. Sua resposta deve ser em pt-BR portugu√™s do brasil",
    agent=especialista_ti
)

# Tarefa para identificar riscos tecnol√≥gicos
tarefa_riscos = Task(
    description=(
        "Com base nos processos tecnol√≥gicos mapeados, identifique os principais riscos envolvidos. "
        "Descreva os riscos e suas poss√≠veis consequ√™ncias para a organiza√ß√£o."
    ),
    expected_output="Uma lista de riscos tecnol√≥gicos associados ao cen√°rio, com explica√ß√£o detalhada. Sua resposta deve ser em pt-BR portugu√™s do brasil",
    agent=especialista_riscos
)

# Tarefa para planejar auditoria
tarefa_auditoria = Task(
    description=(
        "Com base nos riscos identificados, elabore um planejamento detalhado de auditoria para avaliar "
        "e mitigar esses riscos. Inclua metodologias, escopo e cronograma."
    ),
    expected_output="Um planejamento completo de auditoria em TI, pronto para implementa√ß√£o. Sua resposta deve ser em pt-BR portugu√™s do brasil",
    agent=auditor_ti
)

# Cria√ß√£o do fluxo de trabalho (Crew) que organiza a execu√ß√£o das tarefas
# Os agentes trabalham em sequ√™ncia, cada um completando sua tarefa antes do pr√≥ximo come√ßar
crew = Crew(
    agents=[especialista_ti, especialista_riscos, auditor_ti],
    tasks=[tarefa_mapeamento, tarefa_riscos, tarefa_auditoria],
    process=Process.sequential  # Os agentes trabalham em sequ√™ncia
)

# Solicita ao usu√°rio a descri√ß√£o do cen√°rio de TI para auditoria
cenario_ti = input("Descreva o cen√°rio de TI para auditoria: ")

# Executa o fluxo de trabalho com o cen√°rio fornecido
resultado = crew.kickoff(inputs={"cenario": cenario_ti})

# Exibe o resultado final do planejamento de auditoria
print("\nüìå PLANEJAMENTO FINAL DE AUDITORIA üìå\n")
print(resultado)



#==================================================================
#===========================documenta√ß√£o===========================
#==================================================================

#Documenta√ß√£o Detalhada
#Vis√£o Geral
#Este programa √© uma aplica√ß√£o de orquestra√ß√£o de multiagentes de intelig√™ncia artificial utilizando o framework CrewAI. Ele simula um processo de auditoria de TI, onde diferentes agentes desempenham pap√©is espec√≠ficos para analisar um cen√°rio de TI, identificar riscos e planejar auditorias.
#Componentes do C√≥digo
#
#    Configura√ß√£o de Ambiente:
#        O c√≥digo come√ßa configurando uma chave de API necess√°ria para acessar o modelo de linguagem (LLM) que os agentes utilizar√£o.
#    Modelo de Linguagem (LLM):
#        Um modelo de linguagem chamado gemini/gemini-1.5-pro-latest √© configurado. Este modelo √© usado pelos agentes para processar informa√ß√µes e gerar respostas.
#    Agentes:
#        Tr√™s agentes s√£o criados, cada um com um papel espec√≠fico:
#            Especialista de TI: Analisa e mapeia processos tecnol√≥gicos.
#            Especialista em Riscos de Tecnologia: Identifica riscos associados aos processos mapeados.
#            Auditor de TI: Cria um planejamento de auditoria para mitigar os riscos identificados.
#    Tarefas:
#        Cada agente √© respons√°vel por uma tarefa espec√≠fica:
#            Tarefa de Mapeamento: Executada pelo Especialista de TI.
#            Tarefa de Riscos: Executada pelo Especialista em Riscos.
#            Tarefa de Auditoria: Executada pelo Auditor de TI.
#    Fluxo de Trabalho (Crew):
#        Os agentes e suas tarefas s√£o organizados em um fluxo de trabalho sequencial, onde cada agente completa sua tarefa antes do pr√≥ximo come√ßar.
#    Execu√ß√£o:
#        O usu√°rio √© solicitado a descrever um cen√°rio de TI.
#        O fluxo de trabalho √© executado com base no cen√°rio fornecido, e o resultado final √© exibido.

Como Executar

    Pr√©-requisitos:
        Certifique-se de ter o framework CrewAI instalado.
        Configure a chave de API correta para acessar o modelo de linguagem.
    Execu√ß√£o:
        Execute o script Python.
        Quando solicitado, insira uma descri√ß√£o do cen√°rio de TI que deseja auditar.
        O programa processar√° a entrada e exibir√° um planejamento de auditoria detalhado.



